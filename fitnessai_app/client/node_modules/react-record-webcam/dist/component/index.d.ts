/// <reference types="recordrtc" />
import React from 'react';
import type { Recorder } from '../mediaRecorder';
import type { RecordOptions, WebcamStatus } from '../types';
export declare type WebcamRenderProps = {
    status: WebcamStatus;
    closeCamera: () => void;
    download: () => Promise<void>;
    getRecording: () => Promise<Blob | null>;
    openCamera: () => Promise<void>;
    retake: () => void;
    start: () => void;
    stop: () => void;
};
export declare type RecordWebcamProps = {
    cssNamespace?: string;
    downloadFileName?: string;
    options?: RecordOptions;
    getStatus?: (status: WebcamStatus) => void;
    render?: (props: WebcamRenderProps) => void;
    controlLabels?: {
        CLOSE: string | number;
        DOWNLOAD: string | number;
        OPEN: string | number;
        RETAKE: string | number;
        START: string | number;
        STOP: string | number;
    };
};
export declare type RecordWebcamState = {
    status: WebcamStatus;
};
export declare class RecordWebcam extends React.PureComponent<RecordWebcamProps, RecordWebcamState> {
    constructor(props: RecordWebcamProps);
    state: RecordWebcamState;
    recorder: Recorder;
    recorderOptions: RecordOptions;
    webcamRef: React.RefObject<HTMLVideoElement>;
    previewRef: React.RefObject<HTMLVideoElement>;
    static defaultProps: {
        cssNamespace: "react-record-webcam";
    };
    options: {
        aspectRatio?: number | undefined;
        fileName?: string | undefined;
        frameRate?: number | undefined;
        height?: number | undefined;
        filename?: string | undefined;
        recordingLength?: number | undefined;
        width?: number | undefined;
        type?: "video" | "audio" | "canvas" | "gif" | undefined;
        recorderType?: import("recordrtc").RecordRTCPromisesHandler | import("recordrtc").MediaStreamRecorder | import("recordrtc").StereoAudioRecorder | import("recordrtc").WebAssemblyRecorder | import("recordrtc").CanvasRecorder | import("recordrtc").GifRecorder | import("recordrtc").WhammyRecorder | import("recordrtc").MultiStreamsMixer | import("recordrtc").MultiStreamRecorder | undefined;
        mimeType?: "video/webm" | "audio/webm" | "audio/webm;codecs=pcm" | "video/mp4" | "video/webm;codecs=vp9" | "video/webm;codecs=vp8" | "video/webm;codecs=h264" | "video/x-matroska;codecs=avc1" | "video/mpeg" | "audio/wav" | "audio/ogg" | undefined;
        disableLogs?: boolean | undefined;
        timeSlice?: number | undefined;
        ondataavailable?: ((blob: Blob) => void) | undefined;
        checkForInactiveTracks?: boolean | undefined;
        onTimeStamp?: ((timestamp: number, timestamps: number[]) => void) | undefined;
        bitsPerSecond?: number | undefined;
        audioBitsPerSecond?: number | undefined;
        videoBitsPerSecond?: number | undefined;
        frameInterval?: number | undefined;
        previewStream?: ((stream: MediaStream) => void) | undefined;
        video?: HTMLVideoElement | undefined;
        canvas?: {
            width: number;
            height: number;
        } | undefined;
        sampleRate?: number | undefined;
        desiredSampRate?: number | undefined;
        bufferSize?: 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | undefined;
        numberOfAudioChannels?: 1 | 2 | undefined;
        bitrate?: number | undefined;
        elementClass?: string | undefined;
    } | {
        aspectRatio?: number | undefined;
        fileName?: string | undefined;
        frameRate?: number | undefined;
        height?: number | undefined;
        filename?: string | undefined;
        recordingLength?: number | undefined;
        width?: number | undefined;
        type?: "video" | "audio" | "canvas" | "gif" | undefined;
        recorderType?: import("recordrtc").RecordRTCPromisesHandler | import("recordrtc").MediaStreamRecorder | import("recordrtc").StereoAudioRecorder | import("recordrtc").WebAssemblyRecorder | import("recordrtc").CanvasRecorder | import("recordrtc").GifRecorder | import("recordrtc").WhammyRecorder | import("recordrtc").MultiStreamsMixer | import("recordrtc").MultiStreamRecorder | undefined;
        mimeType?: "video/webm" | "audio/webm" | "audio/webm;codecs=pcm" | "video/mp4" | "video/webm;codecs=vp9" | "video/webm;codecs=vp8" | "video/webm;codecs=h264" | "video/x-matroska;codecs=avc1" | "video/mpeg" | "audio/wav" | "audio/ogg" | undefined;
        disableLogs?: boolean | undefined;
        timeSlice?: number | undefined;
        ondataavailable?: ((blob: Blob) => void) | undefined;
        checkForInactiveTracks?: boolean | undefined;
        onTimeStamp?: ((timestamp: number, timestamps: number[]) => void) | undefined;
        bitsPerSecond?: number | undefined;
        audioBitsPerSecond?: number | undefined;
        videoBitsPerSecond?: number | undefined;
        frameInterval?: number | undefined;
        previewStream?: ((stream: MediaStream) => void) | undefined;
        video?: HTMLVideoElement | undefined;
        canvas?: {
            width: number;
            height: number;
        } | undefined;
        sampleRate?: number | undefined;
        desiredSampRate?: number | undefined;
        bufferSize?: 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | undefined;
        numberOfAudioChannels?: 1 | 2 | undefined;
        bitrate?: number | undefined;
        elementClass?: string | undefined;
    };
    componentDidUpdate(_: RecordWebcamProps, prevState: RecordWebcamState): void;
    handleError(error: unknown): void;
    stopStream(): void;
    close(): void;
    openCamera(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    retake(): Promise<void>;
    download(): Promise<void>;
    getRecording(): Promise<Blob | null>;
    render(): JSX.Element;
}
